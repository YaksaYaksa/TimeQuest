import json
import asyncio
import logging
import random
from collections import Counter
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import TimedOut, BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"
users = {}

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(users, f)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(user_id):
    if user_id not in users:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥–µ—Ä–æ—è", callback_data="create")],
            [InlineKeyboardButton("–ù–æ–≤–∞—è –º–∏—Å—Å–∏—è", callback_data="quest"), InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("–ö–∞—Ä—Ç–∞", callback_data="map"), InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("–û—Ç–¥—ã—Ö", callback_data="rest"), InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
            [InlineKeyboardButton("–°—Ä–∞–∑–∏—Ç—å—Å—è", callback_data="fight"), InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞", callback_data="description")]
        ])
    else:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ—Ä–æ—è", callback_data="edit_hero")],
            [InlineKeyboardButton("–ù–æ–≤–∞—è –º–∏—Å—Å–∏—è", callback_data="quest"), InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("–ö–∞—Ä—Ç–∞", callback_data="map"), InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("–û—Ç–¥—ã—Ö", callback_data="rest"), InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
            [InlineKeyboardButton("–°—Ä–∞–∑–∏—Ç—å—Å—è", callback_data="fight"), InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞", callback_data="description")]
        ])

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
CLASS_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("Knight", callback_data="class_Knight"), InlineKeyboardButton("Mage", callback_data="class_Mage"), InlineKeyboardButton("Explorer", callback_data="class_Explorer")]
])

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
DIFFICULTY_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("Easy (15 –º–∏–Ω)", callback_data="difficulty_Easy")],
    [InlineKeyboardButton("Medium (30 –º–∏–Ω)", callback_data="difficulty_Medium")],
    [InlineKeyboardButton("Hard (60 –º–∏–Ω)", callback_data="difficulty_Hard")]
])

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
SHOP_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ó–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏ (50 –º–æ–Ω–µ—Ç)", callback_data="buy_potion")],
    [InlineKeyboardButton("–°—É–ø–µ—Ä-–º–µ—á (100 –º–æ–Ω–µ—Ç)", callback_data="buy_super_sword")],
    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

# –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
SHOW_MENU_KEYBOARD = ReplyKeyboardMarkup([[KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")]], resize_keyboard=True, one_time_keyboard=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def send_with_retry(bot, chat_id, text, reply_markup=None, parse_mode=None, retries=3, delay=1):
    for attempt in range(retries):
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            msg = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return msg
        except TimedOut as e:
            logger.warning(f"–¢–∞–π–º-–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
            if attempt < retries - 1:
                await asyncio.sleep(delay)
            else:
                logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def edit_with_retry(bot, chat_id, message_id, text, reply_markup=None, parse_mode=None, retries=3, delay=1):
    for attempt in range(retries):
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
            return True
        except BadRequest as e:
            if "Message is not modified" in str(e):
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {text[:50]}")
                return True
            logger.warning(f"BadRequest –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
            if attempt < retries - 1:
                await asyncio.sleep(delay)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                return False
        except TimedOut as e:
            logger.warning(f"–¢–∞–π–º-–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
            if attempt < retries - 1:
                await asyncio.sleep(delay)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def send_photo_with_retry(bot, chat_id, photo, caption=None, reply_markup=None, retries=3, delay=1):
    for attempt in range(retries):
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}...")
            msg = await bot.send_photo(chat_id=chat_id, photo=photo, caption=caption, reply_markup=reply_markup)
            logger.info("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return msg
        except TimedOut as e:
            logger.warning(f"–¢–∞–π–º-–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
            if attempt < retries - 1:
                await asyncio.sleep(delay)
            else:
                logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
                return None

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    chat_id = update.message.chat_id
    
    welcome_text = (
        "üåü TimeQuest: –¢–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ä—å–±–µ —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π! üåü\n\n"
        "–Ø ‚Äî –±–æ—Ç-—Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–µ—Ä —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ RPG, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã! "
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –≥–µ—Ä–æ—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏—Å—Å–∏–∏, —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø—ã—Ç –∏ –º–æ–Ω–µ—Ç—ã, "
        "–æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –º–∞—Å—Ç–µ—Ä–æ–º —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. "
        "–ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –¥–µ–ª–∞–º–∏ –∏ –ø–æ–±–µ–∂–¥–∞—Ç—å –ª–µ–Ω—å —á–µ—Ä–µ–∑ –∏–≥—Ä—É!\n\n"
        "‚ú® –ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    
    welcome_image_path = r"C:\Users\home\Desktop\tq\welcome_image.png"
    with open(welcome_image_path, "rb") as photo_file:
        msg = await send_photo_with_retry(
            context.bot,
            chat_id,
            photo=photo_file,
            caption=welcome_text,
            reply_markup=get_main_menu(user_id)
        )
    if msg:
        context.user_data["last_message_id"] = msg.message_id

# –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    full_description = (
        "üåü *TimeQuest: –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é!* üåü\n\n"
        "TimeQuest ‚Äî —ç—Ç–æ –±–æ—Ç-—Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–µ—Ä —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ RPG, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –≤ –∫–≤–µ—Å—Ç—ã –∏ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
        "üìú *–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:*\n"
        "- *–ì–µ—Ä–æ–π*: –°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Ä—ã—Ü–∞—Ä—å, –º–∞–≥ –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å).\n"
        "- *–ö–≤–µ—Å—Ç—ã*: –ó–∞–¥–∞—á–∏ ‚Äî —ç—Ç–æ –º–∏—Å—Å–∏–∏ —Å —Ç–∞–π–º–µ—Ä–æ–º (15, 30 –∏–ª–∏ 60 –º–∏–Ω—É—Ç).\n"
        "- *–°—Ä–∞–∂–µ–Ω–∏—è*: –°—Ä–∞–∂–∞–π—Å—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏, —Ç—Ä–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã.\n"
        "- *–ü—Ä–æ–≥—Ä–µ—Å—Å*: –ü–æ–ª—É—á–∞–π –æ–ø—ã—Ç, –º–æ–Ω–µ—Ç—ã –∏ –æ—Ç–∫—Ä—ã–≤–∞–π —Ä–µ–≥–∏–æ–Ω—ã (–õ–µ—Å ‚Üí –ì–æ—Ä—ã ‚Üí –ó–∞–º–æ–∫).\n"
        "- *–≠–Ω–µ—Ä–≥–∏—è*: –ö–≤–µ—Å—Ç—ã –∏ –±–æ–∏ —Ç—Ä–∞—Ç—è—Ç —ç–Ω–µ—Ä–≥–∏—é (15-60), –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —á–µ—Ä–µ–∑ –æ—Ç–¥—ã—Ö.\n"
        "- *–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å*: –°–æ–±–∏—Ä–∞–π –Ω–∞–≥—Ä–∞–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–µ—á').\n\n"
        "üéÆ *–§—É–Ω–∫—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é):*\n"
        "1. *–°–æ–∑–¥–∞—Ç—å –≥–µ—Ä–æ—è* ‚Äî –í–≤–µ–¥–∏ –∏–º—è –∏ –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–µ—Ä–æ—è –Ω–µ—Ç).\n"
        "2. *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ—Ä–æ—è* ‚Äî –ò–∑–º–µ–Ω–∏ –∏–º—è –∏ –∫–ª–∞—Å—Å –≥–µ—Ä–æ—è.\n"
        "3. *–ù–æ–≤–∞—è –º–∏—Å—Å–∏—è* ‚Äî –ó–∞–¥–∞—á–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º.\n"
        "4. *–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å* ‚Äî –ü–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã.\n"
        "5. *–ö–∞—Ä—Ç–∞* ‚Äî –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω.\n"
        "6. *–°—Ç–∞—Ç—É—Å* ‚Äî –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è.\n"
        "7. *–û—Ç–¥—ã—Ö* ‚Äî –ù–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ' 5 —Ä–∞–∑ –¥–ª—è +20 —ç–Ω–µ—Ä–≥–∏–∏.\n"
        "8. *–ú–∞–≥–∞–∑–∏–Ω* ‚Äî –ö—É–ø–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞ –º–æ–Ω–µ—Ç—ã.\n"
        "9. *–°—Ä–∞–∑–∏—Ç—å—Å—è* ‚Äî –ë–æ–π —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã.\n"
        "10. *–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞* ‚Äî –ß–∏—Ç–∞–π —ç—Ç–æ!\n\n"
        "‚öôÔ∏è *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "- –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
        "- –ö–≤–µ—Å—Ç—ã: Easy (15), Medium (30), Hard (60) —ç–Ω–µ—Ä–≥–∏–∏.\n"
        "- –ó–∞ –∫–≤–µ—Å—Ç: –æ–ø—ã—Ç (10/25/50), 10 –º–æ–Ω–µ—Ç, —É—Ä–æ–≤–µ–Ω—å –∑–∞ 10 –æ–ø—ã—Ç–∞.\n\n"
        "üèÖ *–¶–µ–ª—å*: –î–æ–π–¥–∏ –¥–æ –ó–∞–º–∫–∞ –∏ –ø–æ–±–µ–¥–∏ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é!"
    )
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, full_description, reply_markup=get_main_menu(user_id), parse_mode="Markdown"):
        return
    msg = await send_with_retry(context.bot, chat_id, full_description, reply_markup=get_main_menu(user_id), parse_mode="Markdown")
    if msg:
        context.user_data["last_message_id"] = msg.message_id

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ—Ä–æ—è
async def create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    
    if user_id in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≥–µ—Ä–æ–π! –ò—Å–ø–æ–ª—å–∑—É–π '–°—Ç–∞—Ç—É—Å' –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ—Ä–æ—è'.", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≥–µ—Ä–æ–π! –ò—Å–ø–æ–ª—å–∑—É–π '–°—Ç–∞—Ç—É—Å' –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ—Ä–æ—è'.", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è:", reply_markup=CLASS_MENU):
        pass
    else:
        msg = await send_with_retry(context.bot, chat_id, "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è:", reply_markup=CLASS_MENU)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
    context.user_data["awaiting_create_name"] = True

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ—Ä–æ—è
async def edit_hero(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –≥–µ—Ä–æ—è:", reply_markup=CLASS_MENU):
        pass
    else:
        msg = await send_with_retry(context.bot, chat_id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –≥–µ—Ä–æ—è:", reply_markup=CLASS_MENU)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
    context.user_data["awaiting_edit_name"] = True

# –ù–æ–≤–∞—è –º–∏—Å—Å–∏—è
async def quest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    if users[user_id]["current_quest"]:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–≤–µ—Å—Ç!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–≤–µ—Å—Ç!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–í–≤–µ–¥–∏ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥'):", reply_markup=SHOW_MENU_KEYBOARD):
        pass
    else:
        msg = await send_with_retry(context.bot, chat_id, "–í–≤–µ–¥–∏ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥'):", reply_markup=SHOW_MENU_KEYBOARD)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
    context.user_data["awaiting_quest_text"] = True

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    items = users[user_id]["inventory"]
    if not items:
        msg_text = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –ü—É—Å—Ç–æ"
    else:
        item_counts = Counter(items)
        msg_text = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n" + "\n".join(f"{item} - {count} —à—Ç." for item, count in item_counts.items())
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, msg_text, reply_markup=get_main_menu(user_id)):
        return
    msg = await send_with_retry(context.bot, chat_id, msg_text, reply_markup=get_main_menu(user_id))
    if msg:
        context.user_data["last_message_id"] = msg.message_id

# –ö–∞—Ä—Ç–∞
async def map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ö–∞—Ä—Ç–∞' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    region = ["–õ–µ—Å", "–ì–æ—Ä—ã", "–ó–∞–º–æ–∫"][users[user_id]["region"]]
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: {region}", reply_markup=get_main_menu(user_id)):
        return
    msg = await send_with_retry(context.bot, chat_id, f"–¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: {region}", reply_markup=get_main_menu(user_id))
    if msg:
        context.user_data["last_message_id"] = msg.message_id

# –°—Ç–∞—Ç—É—Å
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–°—Ç–∞—Ç—É—Å' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    user = users[user_id]
    msg_text = (
        f"–ì–µ—Ä–æ–π: {user['name']} ({user['class']})\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
        f"–û–ø—ã—Ç: {user['exp']}\n"
        f"–ú–æ–Ω–µ—Ç—ã: {user['coins']}\n"
        f"–≠–Ω–µ—Ä–≥–∏—è: {user['energy']}\n"
        f"–†–µ–≥–∏–æ–Ω: {['–õ–µ—Å', '–ì–æ—Ä—ã', '–ó–∞–º–æ–∫'][user['region']]}"
    )
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, msg_text, reply_markup=get_main_menu(user_id)):
        return
    msg = await send_with_retry(context.bot, chat_id, msg_text, reply_markup=get_main_menu(user_id))
    if msg:
        context.user_data["last_message_id"] = msg.message_id

# –ú–∞–≥–∞–∑–∏–Ω
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ú–∞–≥–∞–∑–∏–Ω' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    shop_text = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω, {users[user_id]['name']}!\n"
        f"–¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {users[user_id]['coins']}\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å?\n"
        "- –ó–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏ (+20 —ç–Ω–µ—Ä–≥–∏–∏) ‚Äî 50 –º–æ–Ω–µ—Ç\n"
        "- –°—É–ø–µ—Ä-–º–µ—á (–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å) ‚Äî 100 –º–æ–Ω–µ—Ç"
    )
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, shop_text, reply_markup=SHOP_MENU):
        return
    msg = await send_with_retry(context.bot, chat_id, shop_text, reply_markup=SHOP_MENU)
    if msg:
        context.user_data["last_message_id"] = msg.message_id

# –°—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏
async def fight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–°—Ä–∞–∑–∏—Ç—å—Å—è' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    monsters = [
        ("–ì–æ–±–ª–∏–Ω", 10, 70, (5, 5, None)),
        ("–û—Ä–∫", 20, 50, (15, 10, None)),
        ("–î—Ä–∞–∫–æ–Ω", 40, 30, (50, 25, "–î—Ä–∞–∫–æ–Ω–∏–π –∫–ª—ã–∫" if random.random() < 0.3 else None))
    ]
    monster = random.choice(monsters)
    monster_name, energy_cost, base_win_chance, (coins_reward, exp_reward, item_reward) = monster
    
    if users[user_id]["energy"] < energy_cost:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ ({users[user_id]['energy']}/{energy_cost})! –ò—Å–ø–æ–ª—å–∑—É–π '–û—Ç–¥—ã—Ö' –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω.", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ ({users[user_id]['energy']}/{energy_cost})! –ò—Å–ø–æ–ª—å–∑—É–π '–û—Ç–¥—ã—Ö' –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω.", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    win_chance = min(95, base_win_chance + 5 * (users[user_id]["level"] - 1))
    users[user_id]["energy"] -= energy_cost
    fight_result = random.random() * 100 < win_chance
    
    if fight_result:
        users[user_id]["coins"] += coins_reward
        users[user_id]["exp"] += exp_reward
        if item_reward:
            users[user_id]["inventory"].append(item_reward)
        save_data()
        result_text = (
            f"–¢—ã —Å—Ä–∞–∑–∏–ª—Å—è —Å {monster_name} –∏ –ø–æ–±–µ–¥–∏–ª!\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: +{coins_reward} –º–æ–Ω–µ—Ç, +{exp_reward} –æ–ø—ã—Ç–∞"
            f"{', ' + item_reward + ' –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å' if item_reward else ''}."
        )
    else:
        save_data()
        result_text = f"–¢—ã —Å—Ä–∞–∑–∏–ª—Å—è —Å {monster_name} –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª! –≠–Ω–µ—Ä–≥–∏—è –ø–æ—Ç—Ä–∞—á–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, result_text, reply_markup=get_main_menu(user_id)):
        return
    msg = await send_with_retry(context.bot, chat_id, result_text, reply_markup=get_main_menu(user_id))
    if msg:
        context.user_data["last_message_id"] = msg.message_id

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–¥—ã—Ö–∞
async def rest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    await query.answer()
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–¥—ã—Ö' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if user_id not in users:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    if "rest_count" in context.user_data:
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–¢—ã —É–∂–µ –æ—Ç–¥—ã—Ö–∞–µ—à—å! –ù–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ' –µ—â—ë {5 - context.user_data['rest_count']} —Ä–∞–∑.", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, f"–¢—ã —É–∂–µ –æ—Ç–¥—ã—Ö–∞–µ—à—å! –ù–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ' –µ—â—ë {5 - context.user_data['rest_count']} —Ä–∞–∑.", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–¢–≤–æ–π –≥–µ—Ä–æ–π —É—Å—Ç–∞–ª! –ù–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ' 5 —Ä–∞–∑ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏.", reply_markup=SHOW_MENU_KEYBOARD):
        pass
    else:
        msg = await send_with_retry(context.bot, chat_id, "–¢–≤–æ–π –≥–µ—Ä–æ–π —É—Å—Ç–∞–ª! –ù–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ' 5 —Ä–∞–∑ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏.", reply_markup=SHOW_MENU_KEYBOARD)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
    context.user_data["rest_count"] = 0

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text.strip()
    chat_id = update.message.chat_id
    last_message_id = context.user_data.get("last_message_id")

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    if text == "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é":
        if users.get(user_id, {}).get("current_quest"):
            quest = users[user_id]["current_quest"]
            elapsed = asyncio.get_event_loop().time() - context.user_data.get("quest_start_time", asyncio.get_event_loop().time())
            total_seconds = quest["time"] * 60
            remaining = total_seconds - elapsed
            progress_percent = min(100, int((elapsed / total_seconds) * 100))
            bar_length = 10
            filled = int(bar_length * progress_percent / 100)
            bar = "‚ñà" * filled + " " * (bar_length - filled)
            minutes = int(remaining // 60)
            seconds = int(remaining % 60)
            time_str = f"{minutes:02d}:{seconds:02d}"
            progress_text = f"–ö–≤–µ—Å—Ç: {quest['title']}\n–û—Å—Ç–∞–ª–æ—Å—å: {time_str}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {progress_percent}%"
            msg = await send_with_retry(context.bot, chat_id, progress_text, reply_markup=get_main_menu(user_id))
            if msg:
                context.user_data["last_message_id"] = msg.message_id
        else:
            msg = await send_with_retry(context.bot, chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(user_id))
            if msg:
                context.user_data["last_message_id"] = msg.message_id
        return
    
    if context.user_data.get("awaiting_create_name"):
        context.user_data["hero_name"] = text
        context.user_data["awaiting_create_name"] = False
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–ò–º—è: {text}\n–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:", reply_markup=CLASS_MENU):
            return
        msg = await send_with_retry(context.bot, chat_id, f"–ò–º—è: {text}\n–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å:", reply_markup=CLASS_MENU)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    if context.user_data.get("awaiting_edit_name"):
        context.user_data["hero_name"] = text
        context.user_data["awaiting_edit_name"] = False
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–ù–æ–≤–æ–µ –∏–º—è: {text}\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å:", reply_markup=CLASS_MENU):
            return
        msg = await send_with_retry(context.bot, chat_id, f"–ù–æ–≤–æ–µ –∏–º—è: {text}\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å:", reply_markup=CLASS_MENU)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    if context.user_data.get("awaiting_quest_text"):
        context.user_data["quest_text"] = text
        context.user_data["awaiting_quest_text"] = False
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–≤–µ—Å—Ç–∞:", reply_markup=DIFFICULTY_MENU):
            return
        msg = await send_with_retry(context.bot, chat_id, "–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–≤–µ—Å—Ç–∞:", reply_markup=DIFFICULTY_MENU)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
        return
    
    if "rest_count" in context.user_data:
        if text.lower() == "–≥–æ—Ç–æ–≤–æ":
            context.user_data["rest_count"] += 1
            if context.user_data["rest_count"] >= 5:
                users[user_id]["energy"] = min(100, users[user_id]["energy"] + 20)
                if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–¢—Ä–∞–≤—ã —Å–æ–±—Ä–∞–Ω—ã! –≠–Ω–µ—Ä–≥–∏—è: {users[user_id]['energy']}", reply_markup=get_main_menu(user_id)):
                    del context.user_data["rest_count"]
                    return
                msg = await send_with_retry(context.bot, chat_id, f"–¢—Ä–∞–≤—ã —Å–æ–±—Ä–∞–Ω—ã! –≠–Ω–µ—Ä–≥–∏—è: {users[user_id]['energy']}", reply_markup=get_main_menu(user_id))
                if msg:
                    context.user_data["last_message_id"] = msg.message_id
                del context.user_data["rest_count"]
            else:
                remaining = 5 - context.user_data["rest_count"]
                rest_messages = [
                    f"–ï—â—ë {remaining} —Ç—Ä–∞–≤, –∏ –≥–µ—Ä–æ–π —Å–∫–∞–∂–µ—Ç '–£—Ñ, —É—Å—Ç–∞–ª!' –ü–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'!",
                    f"–°–æ–±–µ—Ä–∏ –µ—â—ë {remaining} —Ç—Ä–∞–≤, –Ω–µ –ª–µ–Ω–∏—Å—å, –∫–∞–∫ –¥—Ä–∞–∫–æ–Ω! '–ì–æ—Ç–æ–≤–æ' –≤ –ø–æ–º–æ—â—å.",
                    f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} —Ç—Ä–∞–≤ –¥–æ —ç–ø–∏—á–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞, –¥–∞–≤–∞–π '–≥–æ—Ç–æ–≤–æ'!",
                    f"–ì–µ—Ä–æ–π –ø—Ä–æ—Å–∏—Ç –µ—â—ë {remaining} —Ç—Ä–∞–≤, –ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ', –Ω–µ –∑–µ–≤–∞–π!",
                    f"–¢—Ä–∞–≤—ã –∂–¥—É—Ç: –µ—â—ë {remaining} —Ä–∞–∑ '–≥–æ—Ç–æ–≤–æ', –∏ —Ç—ã –º–∞—Å—Ç–µ—Ä –æ—Ç–¥—ã—Ö–∞!",
                    f"–ï—â—ë {remaining} —Ç—Ä–∞–≤ –¥–æ –ø–æ–±–µ–¥—ã –Ω–∞–¥ —É—Å—Ç–∞–ª–æ—Å—Ç—å—é, –ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'!",
                    f"–¢–æ–ª—å–∫–æ {remaining} —Ç—Ä–∞–≤ –æ—Ç–¥–µ–ª—è—é—Ç —Ç–µ–±—è –æ—Ç —Ä–µ–ª–∞–∫—Å–∞, –¥–∞–≤–∞–π '–≥–æ—Ç–æ–≤–æ'!",
                    f"–°–æ–±–µ—Ä–∏ –µ—â—ë {remaining} —Ç—Ä–∞–≤, –∏–ª–∏ –≥–µ—Ä–æ–π –Ω–∞—á–Ω—ë—Ç –Ω—ã—Ç—å! –ü–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.",
                    f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} —Ç—Ä–∞–≤ ‚Äî '–≥–æ—Ç–æ–≤–æ', –∏ —ç–Ω–µ—Ä–≥–∏—è –≤ –∫–∞—Ä–º–∞–Ω–µ!",
                    f"–ï—â—ë {remaining} '–≥–æ—Ç–æ–≤–æ', –∏ —Ç—Ä–∞–≤—ã —Å–∫–∞–∂—É—Ç —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ!"
                ]
                if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, random.choice(rest_messages), reply_markup=SHOW_MENU_KEYBOARD):
                    return
                msg = await send_with_retry(context.bot, chat_id, random.choice(rest_messages), reply_markup=SHOW_MENU_KEYBOARD)
                if msg:
                    context.user_data["last_message_id"] = msg.message_id
        else:
            error_messages = [
                "–≠–π, —ç—Ç–æ –Ω–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ '–≥–æ—Ç–æ–≤–æ'! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                "–ù—É —Ç—ã –¥–∞—ë—à—å! –ì–µ—Ä–æ–∏ —Ç–∞–∫ –Ω–µ –ø–∏—à—É—Ç, –¥–∞–≤–∞–π '–≥–æ—Ç–æ–≤–æ'!",
                "–ß—Ç–æ-—Ç–æ —Ç–≤–æ–∏ —Ç—Ä–∞–≤—ã –Ω–µ —Å–æ–±—Ä–∞–ª–∏—Å—å, –ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ' —Ç–æ—á–Ω–µ–µ!",
                "–¢–≤–æ–π –≥–µ—Ä–æ–π –≤ —à–æ–∫–µ: —ç—Ç–æ –Ω–µ '–≥–æ—Ç–æ–≤–æ', –ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                "–û–π, –Ω–µ —Ç—É–¥–∞ –ø–∞–ª—å—Ü–µ–º –ø–æ–ø–∞–ª! –ü–∏—à–∏ '–≥–æ—Ç–æ–≤–æ', —á–µ–º–ø–∏–æ–Ω.",
                "–¢—Ä–∞–≤—ã —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ —Ç–æ–±–æ–π! –î–∞–≤–∞–π '–≥–æ—Ç–æ–≤–æ' –∫–∞–∫ –Ω–∞–¥–æ.",
                "–ù–µ-–∞, —ç—Ç–æ –Ω–µ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–æ–∫—Ä–æ–≤–∏—â! –ü–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.",
                "–ì–µ—Ä–æ–π —É—Å—Ç–∞–ª –æ—Ç –æ—à–∏–±–æ–∫, –¥–∞–≤–∞–π '–≥–æ—Ç–æ–≤–æ' –±–µ–∑ —Ñ–æ–∫—É—Å–æ–≤!",
                "–¢—ã —á—Ç–æ, —Ç—Ä–∞–≤—É –ø—É–≥–∞–µ—à—å? –ü–∏—à–∏ '–≥–æ—Ç–æ–≤–æ', –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è.",
                "–≠—Ç–æ –Ω–µ —ç–ø–∏—á–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ! '–ì–æ—Ç–æ–≤–æ' ‚Äî –≤–æ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ."
            ]
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, random.choice(error_messages), reply_markup=SHOW_MENU_KEYBOARD):
                return
            msg = await send_with_retry(context.bot, chat_id, random.choice(error_messages), reply_markup=SHOW_MENU_KEYBOARD)
            if msg:
                context.user_data["last_message_id"] = msg.message_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∫–≤–µ—Å—Ç–∞
async def update_quest_progress(bot, chat_id, message_id, title, total_time, user_id, context):
    start_time = asyncio.get_event_loop().time()
    context.user_data["quest_start_time"] = start_time
    update_interval = 5
    total_seconds = total_time * 60
    
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –∫–≤–µ—Å—Ç–∞ '{title}' (user_id: {user_id})")
    
    last_progress_text = ""
    
    while True:
        elapsed = asyncio.get_event_loop().time() - start_time
        remaining = total_seconds - elapsed
        
        if remaining <= 0:
            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∫–≤–µ—Å—Ç–∞ '{title}' –∑–∞–≤–µ—Ä—à—ë–Ω (user_id: {user_id})")
            break
        
        progress_percent = min(100, int((elapsed / total_seconds) * 100))
        bar_length = 10
        filled = int(bar_length * progress_percent / 100)
        bar = "‚ñà" * filled + " " * (bar_length - filled)
        
        minutes = int(remaining // 60)
        seconds = int(remaining % 60)
        time_str = f"{minutes:02d}:{seconds:02d}"
        
        progress_text = f"–ö–≤–µ—Å—Ç: {title}\n–û—Å—Ç–∞–ª–æ—Å—å: {time_str}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {progress_percent}%"
        
        if progress_text != last_progress_text:
            await edit_with_retry(bot, chat_id, message_id, progress_text)
            last_progress_text = progress_text
        
        await asyncio.sleep(update_interval)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = query.message.chat_id
    user_id = str(query.from_user.id)
    last_message_id = context.user_data.get("last_message_id")
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {user_id}: {data}")
    
    await query.answer()
    
    if data == "create":
        await create(update, context)
    elif data == "edit_hero":
        await edit_hero(update, context)
    elif data.startswith("class_"):
        class_name = data.split("_")[1]
        if context.user_data.get("hero_name"):
            name = context.user_data["hero_name"]
            if "awaiting_create_name" in context.user_data:
                del context.user_data["awaiting_create_name"]
                users[user_id] = {
                    "name": name,
                    "class": class_name,
                    "level": 1,
                    "exp": 0,
                    "coins": 0,
                    "energy": 100,
                    "inventory": [],
                    "region": 0,
                    "quests_completed": 0,
                    "current_quest": None
                }
                save_data()
                del context.user_data["hero_name"]
                if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–ì–µ—Ä–æ–π {name} ({class_name}) —Å–æ–∑–¥–∞–Ω!", reply_markup=get_main_menu(user_id)):
                    return
                msg = await send_with_retry(context.bot, chat_id, f"–ì–µ—Ä–æ–π {name} ({class_name}) —Å–æ–∑–¥–∞–Ω!", reply_markup=get_main_menu(user_id))
                if msg:
                    context.user_data["last_message_id"] = msg.message_id
            elif "awaiting_edit_name" in context.user_data:
                del context.user_data["awaiting_edit_name"]
                users[user_id]["name"] = name
                users[user_id]["class"] = class_name
                save_data()
                del context.user_data["hero_name"]
                if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–ì–µ—Ä–æ–π –∏–∑–º–µ–Ω—ë–Ω: {name} ({class_name})!", reply_markup=get_main_menu(user_id)):
                    return
                msg = await send_with_retry(context.bot, chat_id, f"–ì–µ—Ä–æ–π –∏–∑–º–µ–Ω—ë–Ω: {name} ({class_name})!", reply_markup=get_main_menu(user_id))
                if msg:
                    context.user_data["last_message_id"] = msg.message_id
        return
    elif data == "quest":
        await quest(update, context)
    elif data == "inventory":
        await inventory(update, context)
    elif data == "map":
        await map(update, context)
    elif data == "status":
        await status(update, context)
    elif data == "rest":
        await rest(update, context)
    elif data == "shop":
        await shop(update, context)
    elif data == "fight":
        await fight(update, context)
    elif data == "description":
        await description(update, context)
    elif data == "buy_potion":
        if user_id not in users:
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
                return
            msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
            if msg:
                context.user_data["last_message_id"] = msg.message_id
            return
        if users[user_id]["coins"] < 50:
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ó–∞–≤–µ—Ä—à–∞–π –∫–≤–µ—Å—Ç—ã.", reply_markup=SHOP_MENU):
                return
            msg = await send_with_retry(context.bot, chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ó–∞–≤–µ—Ä—à–∞–π –∫–≤–µ—Å—Ç—ã.", reply_markup=SHOP_MENU)
            if msg:
                context.user_data["last_message_id"] = msg.message_id
        else:
            users[user_id]["coins"] -= 50
            users[user_id]["energy"] = min(100, users[user_id]["energy"] + 20)
            save_data()
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–ó–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏ –∫—É–ø–ª–µ–Ω–æ! –≠–Ω–µ—Ä–≥–∏—è +20.", reply_markup=SHOP_MENU):
                return
            msg = await send_with_retry(context.bot, chat_id, "–ó–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏ –∫—É–ø–ª–µ–Ω–æ! –≠–Ω–µ—Ä–≥–∏—è +20.", reply_markup=SHOP_MENU)
            if msg:
                context.user_data["last_message_id"] = msg.message_id
    elif data == "buy_super_sword":
        if user_id not in users:
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id)):
                return
            msg = await send_with_retry(context.bot, chat_id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥–µ—Ä–æ—è!", reply_markup=get_main_menu(user_id))
            if msg:
                context.user_data["last_message_id"] = msg.message_id
            return
        if users[user_id]["coins"] < 100:
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ó–∞–≤–µ—Ä—à–∞–π –∫–≤–µ—Å—Ç—ã.", reply_markup=SHOP_MENU):
                return
            msg = await send_with_retry(context.bot, chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ó–∞–≤–µ—Ä—à–∞–π –∫–≤–µ—Å—Ç—ã.", reply_markup=SHOP_MENU)
            if msg:
                context.user_data["last_message_id"] = msg.message_id
        else:
            users[user_id]["coins"] -= 100
            users[user_id]["inventory"].append("–°—É–ø–µ—Ä-–º–µ—á")
            save_data()
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–°—É–ø–µ—Ä-–º–µ—á –∫—É–ø–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.", reply_markup=SHOP_MENU):
                return
            msg = await send_with_retry(context.bot, chat_id, "–°—É–ø–µ—Ä-–º–µ—á –∫—É–ø–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.", reply_markup=SHOP_MENU)
            if msg:
                context.user_data["last_message_id"] = msg.message_id
    elif data == "back_to_menu":
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id
    elif data.startswith("difficulty_"):
        difficulty = data.split("_")[1]
        description_text = context.user_data.get("quest_text", "–ë–µ–∑—ã–º—è–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞")
        time = {"Easy": 15, "Medium": 30, "Hard": 60}[difficulty]
        exp = {"Easy": 10, "Medium": 25, "Hard": 50}[difficulty]
        title = f"–ü–æ–±–µ–¥–∏—Ç—å –¥—Ä–∞–∫–æ–Ω–∞ {description_text}"
        
        if users[user_id]["energy"] < time:
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ ({users[user_id]['energy']}/{time})! –ò—Å–ø–æ–ª—å–∑—É–π '–û—Ç–¥—ã—Ö'.", reply_markup=get_main_menu(user_id)):
                return
            msg = await send_with_retry(context.bot, chat_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ ({users[user_id]['energy']}/{time})! –ò—Å–ø–æ–ª—å–∑—É–π '–û—Ç–¥—ã—Ö'.", reply_markup=get_main_menu(user_id))
            if msg:
                context.user_data["last_message_id"] = msg.message_id
            return
        
        users[user_id]["current_quest"] = {"title": title, "time": time, "exp": exp}
        users[user_id]["energy"] -= time
        
        initial_text = f"–ö–≤–µ—Å—Ç: {title}\n–û—Å—Ç–∞–ª–æ—Å—å: {time:02d}:00\n–ü—Ä–æ–≥—Ä–µ—Å—Å: [          ] 0%"
        msg = await send_with_retry(context.bot, chat_id, initial_text)
        if msg:
            context.user_data["last_message_id"] = msg.message_id
            logger.info(f"–°–æ–∑–¥–∞–Ω –∫–≤–µ—Å—Ç '{title}' –¥–ª—è user_id {user_id}, message_id: {msg.message_id}")
            asyncio.create_task(update_quest_progress(context.bot, chat_id, msg.message_id, title, time, user_id, context))
        
        total_seconds = time * 60  # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        # total_seconds = time  # Uncomment for testing
        await asyncio.sleep(total_seconds)
        if users[user_id]["current_quest"]:
            users[user_id]["exp"] += exp
            users[user_id]["coins"] += 10
            users[user_id]["quests_completed"] += 1
            msg = [f"–ü–æ–±–µ–¥–∞! +{exp} –æ–ø—ã—Ç–∞, +10 –º–æ–Ω–µ—Ç"]
            if users[user_id]["exp"] >= users[user_id]["level"] * 10:
                users[user_id]["level"] += 1
                msg.append(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {users[user_id]['level']}!")
            if users[user_id]["quests_completed"] % 5 == 0 and users[user_id]["region"] < 2:
                users[user_id]["region"] += 1
                msg.append(f"–ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω –æ—Ç–∫—Ä—ã—Ç: {['–õ–µ—Å', '–ì–æ—Ä—ã', '–ó–∞–º–æ–∫'][users[user_id]['region']]}!")
            users[user_id]["inventory"].append("–ú–µ—á")
            users[user_id]["current_quest"] = None
            save_data()
            if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "\n".join(msg), reply_markup=get_main_menu(user_id)):
                return
            msg = await send_with_retry(context.bot, chat_id, "\n".join(msg), reply_markup=get_main_menu(user_id))
            if msg:
                context.user_data["last_message_id"] = msg.message_id
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
        if last_message_id and await edit_with_retry(context.bot, chat_id, last_message_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=get_main_menu(user_id)):
            return
        msg = await send_with_retry(context.bot, chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=get_main_menu(user_id))
        if msg:
            context.user_data["last_message_id"] = msg.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error_msg = str(context.error)
    logger.error(f"–û—à–∏–±–∫–∞: {error_msg}")
    chat_id = update.effective_chat.id if update else context.error.chat_id
    
    if "Query is too old" in error_msg or "query id is invalid" in error_msg:
        logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    await context.bot.send_message(chat_id=chat_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global users
    users = load_data()
    app = Application.builder().token("7525183001:AAET8jlSxnxrldh9I5_lxxC-N7Rj3FpZ8BE").build()  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("create", create))
    app.add_handler(CommandHandler("edit_hero", edit_hero))
    app.add_handler(CommandHandler("quest", quest))
    app.add_handler(CommandHandler("inventory", inventory))
    app.add_handler(CommandHandler("map", map))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("rest", rest))
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("fight", fight))
    app.add_handler(CommandHandler("description", description))
    app.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()